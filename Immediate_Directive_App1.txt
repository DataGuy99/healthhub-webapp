# Health Data Destination - Ultra-Specific Implementation

## üìç EXACT DATA FLOW DESTINATION

The health data gets sent to **YOUR Supabase database** - specifically to the health data tables we created in your existing HealthHub web application.

## üîó PRECISE UPLOAD ENDPOINT

**Exact Destination URL:**
```
https://[YOUR-SUPABASE-PROJECT].supabase.co/rest/v1/health_data_upload
```

**Exact Database Table:**
```sql
CREATE TABLE health_data_upload (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    encrypted_data INTEGER[] NOT NULL,
    iv INTEGER[] NOT NULL,
    data_point_count INTEGER NOT NULL,
    extraction_timestamp TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    INDEX idx_health_upload_user (user_id),
    INDEX idx_health_upload_created (created_at DESC)
);
```

## üìä COMPLETE DATA FLOW

```
Android Phone ‚Üí HealthConnect API ‚Üí Encryption ‚Üí Your Supabase ‚Üí Your Web App
     ‚Üì              ‚Üì                  ‚Üì              ‚Üì              ‚Üì
[Raw Health] ‚Üí [Ultra-rich logs] ‚Üí [Encrypted] ‚Üí [Stored] ‚Üí [Displayed/Dashboard]
```

## üîê ENCRYPTION & PRIVACY FLOW

**Before Upload (Android side):**
```kotlin
Raw Health Data ‚Üí JSON serialization ‚Üí AES-256-GCM Encryption ‚Üí Byte Array
```

**After Upload (Supabase side):**
```kotlin
Encrypted Byte Array ‚Üí Stored in database ‚Üí Decrypted by web app ‚Üí Displayed to user
```

## üéØ SPECIFIC UPLOAD CONFIGURATION

In the `UploadManager.kt`, you need to configure these EXACT values:

**Replace these placeholders in UploadManager:**
```kotlin
// YOU MUST CONFIGURE THESE EXACT VALUES:
private fun getSupabaseUrl(): String = "https://your-project-id.supabase.co"
private fun getSupabaseKey(): String = "your-anon-key-from-supabase-dashboard"
private fun getUserId(): String = getUserIdFromSharedPreferences() // Implementation below
```

## üóÉÔ∏è SUPABASE DATABASE DESTINATION

**Create this EXACT table in your Supabase:**

```sql
-- Run this in your Supabase SQL editor:
CREATE TABLE IF NOT EXISTS health_data_upload (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    encrypted_data INTEGER[] NOT NULL,
    iv INTEGER[] NOT NULL,
    data_point_count INTEGER NOT NULL,
    extraction_timestamp TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    
    INDEX idx_health_upload_user (user_id),
    INDEX idx_health_upload_created (created_at DESC)
);

-- Create function to decrypt and process the data
CREATE OR REPLACE FUNCTION process_health_upload(upload_id UUID)
RETURNS TABLE(decrypted_data JSONB, data_points_processed INTEGER) AS $$
BEGIN
    -- This function will be called by your web app to decrypt the data
    -- Implementation depends on your decryption logic in web app
    RETURN QUERY
    SELECT '{}'::JSONB, 0; -- Placeholder - implement actual decryption
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;
```

## üîó WEB APP INTEGRATION POINT

**The data flows to your existing HealthHub web app:**

1. **Android App** ‚Üí Extracts health data ‚Üí Encrypts it ‚Üí Uploads to Supabase
2. **Supabase Database** ‚Üí Stores encrypted health data  
3. **HealthHub Web App** ‚Üí Downloads and decrypts the data ‚Üí Displays in dashboard
4. **Correlation Engine** ‚Üí Analyzes health data vs supplement logs ‚Üí Generates insights

## üì§ UPLOAD ENDPOINT INTEGRATION

**The upload connects to your existing web app infrastructure:**

```kotlin
// In UploadManager.kt - EXACT implementation:
val request = Request.Builder()
    .url("$supabaseUrl/rest/v1/health_data_upload")  // YOUR Supabase endpoint
    .addHeader("apikey", supabaseKey)              // YOUR API key
    .addHeader("Authorization", "Bearer $supabaseKey")
    .addHeader("Content-Type", "application/json")
    .addHeader("Prefer", "return=minimal")
    .post(requestBody)
    .build()
```

## üîÑ COMPLETE DATA JOURNEY

**Step-by-step flow:**

1. **HealthConnect on Android Phone** ‚Üí Raw health data (heart rate, sleep, nutrition, etc.)

2. **HealthBridge Android App** ‚Üí 
   - Extracts ultra-rich logs with 1Hz granularity when available
   - Adds context (activity type, confidence scores, environmental data)
   - Encrypts locally using Android Keystore

3. **Upload Process** ‚Üí 
   - Transmits encrypted data to YOUR Supabase database
   - Includes user ID for proper account association
   - Provides data point count and extraction timestamp

4. **Supabase Storage** ‚Üí 
   - Stores encrypted byte arrays in health_data_upload table
   - Maintains user association and timestamps
   - Ready for web app retrieval

5. **HealthHub Web App** ‚Üí 
   - Downloads encrypted data from Supabase
   - Decrypts using user's encryption key
   - Processes through correlation engine
   - Displays insights in advanced dashboard

## üõ°Ô∏è PRIVACY & SECURITY ASSURANCE

**Before Upload (Android):**
- All health data is encrypted locally on device
- Encryption keys stored in Android Keystore (hardware-backed)
- No readable health data ever transmitted

**During Upload:**
- Only encrypted byte arrays sent over HTTPS
- No health metrics, timestamps, or values visible in transit
- User authentication required for upload endpoint

**After Upload:**
- Encrypted data stored in YOUR database only
- Only YOU can decrypt and view your health data
- No one else (including developers) can access readable health data

## üéØ USER-SPECIFIC CONFIGURATION

**You must replace these in UploadManager.kt:**

```kotlin
// CONFIGURATION REQUIRED - Replace with your actual values:
private fun getSupabaseUrl(): String = "https://[YOUR-PROJECT-ID].supabase.co"
private fun getSupabaseKey(): String = "[YOUR-ANON-KEY-FROM-DASHBOARD]"
private fun getUserId(): String = "[USER-ID-FROM-YOUR-WEB-APP]"

// Example of getting user ID from SharedPreferences:
private fun getUserId(): String {
    return context.getSharedPreferences("health_bridge_prefs", Context.MODE_PRIVATE)
        .getString("user_id", "") ?: ""
}
```

## üìä DATA DESTINATION VALIDATION

**To verify data is reaching your web app:**

1. **Check Supabase Dashboard** ‚Üí Look for new rows in health_data_upload table
2. **Verify Encryption** ‚Üí Encrypted data should be byte arrays, not readable text
3. **Confirm User Association** ‚Üí user_id should match your web app user
4. **Test Decryption** ‚Üí Web app should successfully decrypt and display data

The health data goes directly to YOUR personal HealthHub web application - it's stored encrypted in your Supabase database and only you can decrypt and view it through your web dashboard.